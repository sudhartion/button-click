name: Deploy Project
on: push
jobs:
  configure-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_instance_id: ${{ steps.execute-plan.outputs.ec2_instance_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Terraform
        run: |
          wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform jq
      - name: Initialize Terraform
        run: |
          terraform init
      - name: Generate Terraform plan
        run: |
          terraform plan -out plan.out
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Archive plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./plan.out
      - name: Execute plan
        id: execute-plan
        if: github.ref_name == 'aws-migrate'
        run: |
          terraform apply -auto-approve ./plan.out
          echo "ec2_instance_id=$(.github/get-id.sh)" >>"${GITHUB_OUTPUT}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Commit state
        id: commit-state
        if: steps.execute-plan.conclusion == 'success'
        run: |
          git config user.name 'Sudharshan D M (auto)'
          git config user.email 'dmsudharshan@gmail.com'
          git add ./terraform.tfstate
          git commit -m "Update Terraform state"
          git push
  configure-server:
    needs: configure-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible python3-boto3
      - name: Setup SSH Access
        id: setup-ssh-access
        run: |
          # mkdir -p ~/.ssh/
          # echo "\${{ secrets.SERVER_HOST_KEYS }}" >>~/.ssh/known_hosts
          eval $(ssh-agent)
          echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >>"${GITHUB_OUTPUT}"
          echo "ssh_agent_pid=${SSH_AGENT_PID}" >>"${GITHUB_OUTPUT}"
          ssh-add <(echo "${{ secrets.INFRA_ACCESS_KEY }}")
      - name: Run Playbook
        env:
          SSH_AUTH_SOCK: "${{ steps.setup-ssh-access.outputs.ssh_auth_sock }}"
          AWS_REGION: "${{ vars.AWS_DEFAULT_REGION }}"
          EC2_INSTANCE_ID: "${{ needs.configure-infrastructure.outputs.ec2_instance_id }}"
        run: |
          ansible-playbook --inventory ./inventory.aws_ec2.yml ./playbook.yml
      - name: Cleanup SSH Access
        env:
          SSH_AGENT_PID: "${{ steps.setup-ssh-access.outputs.ssh_agent_pid }}"
        run: |
          # ssh-keygen -R sudhartion.duckdns.org
          kill "${SSH_AGENT_PID}"

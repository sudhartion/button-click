---
name: Deploy Project
on:
  push:
    branches: ["main"]
concurrency:
  group: deploy
  cancel-in-progress: false
jobs:
  configure-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_instance_id: ${{ steps.execute-plan.outputs.ec2_instance_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Terraform
        run: |
          .github/setup-hashicorp-apt-repo.sh
          sudo apt-get install terraform
      - name: Checkout Terraform state
        uses: actions/checkout@v4
        with:
          repository: sudhartion/button-click-tfstate
          path: terraform-state/
          token: ${{ secrets.TFSTATE_REPO_TOKEN }}
      - name: Initialize Terraform
        run: |
          terraform init
      - name: Generate Terraform plan
        run: |
          terraform plan -out plan.out
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Archive plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./plan.out
      - name: Execute plan
        id: execute-plan
        run: |
          terraform apply -auto-approve -backup=- ./plan.out
          echo "ec2_instance_id=$(.github/get-id.sh)" >>"${GITHUB_OUTPUT}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Commit Terraform state
        id: commit-state
        if: steps.execute-plan.conclusion == 'success'
        working-directory: terraform-state/
        run: |
          git config user.name 'Sudharshan D M (auto)'
          git config user.email 'dmsudharshan@gmail.com'
          git add ./terraform.tfstate
          [[ -n $(git diff --staged --name-only) ]] && git commit -m "Update Terraform state"
          git push
  configure-server:
    needs: configure-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ansible
        run: |
          sudo apt-get update && sudo apt-get install pipx
          pipx install --include-deps ansible --force
          pipx inject ansible boto3
      - name: Setup SSH Access
        id: setup-ssh-access
        run: |
          eval $(ssh-agent)
          echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >>"${GITHUB_OUTPUT}"
          echo "ssh_agent_pid=${SSH_AGENT_PID}" >>"${GITHUB_OUTPUT}"
          ssh-add <(echo "${{ secrets.INFRA_ACCESS_KEY }}")
      - name: Create DNS token script
        env:
          DUCKDNS_TOKEN: "${{ secrets.DUCKDNS_TOKEN }}"
        run: |
          .github/create-dns-token-script.sh .github/set-dns-token.sh
      - name: Create certificate key file
        env:
          SERVER_CERT_KEY: "${{ secrets.SERVER_CERT_KEY }}"
        run: |
          .github/create-cert-key-file.sh .github/cert-key
      - name: Run Playbook
        env:
          SSH_AUTH_SOCK: "${{ steps.setup-ssh-access.outputs.ssh_auth_sock }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_REGION: "${{ vars.AWS_DEFAULT_REGION }}"
          EC2_INSTANCE_ID: "${{ needs.configure-infrastructure.outputs.ec2_instance_id }}"
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook --inventory ./inventory.aws_ec2.yml ./playbook.yml
      - name: Cleanup created files
        run: |
          rm .github/set-dns-token.sh .github/cert-key
      - name: Cleanup SSH Access
        env:
          SSH_AGENT_PID: "${{ steps.setup-ssh-access.outputs.ssh_agent_pid }}"
        run: |
          kill "${SSH_AGENT_PID}"
